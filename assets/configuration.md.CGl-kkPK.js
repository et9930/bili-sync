import{_ as a,c as i,o as e,a3 as s}from"./chunks/framework.Bsyxd66g.js";const u=JSON.parse('{"title":"配置文件","description":"","frontmatter":{},"headers":[],"relativePath":"configuration.md","filePath":"configuration.md","lastUpdated":1723132976000}'),t={name:"configuration.md"},n=s('<h1 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h1><p>默认的配置文件已经在<a href="/quick-start">快速开始</a>中给出，该文档对配置文件的各个参数依次详细解释。</p><h2 id="video-name-与-page-name" tabindex="-1">video_name 与 page_name <a class="header-anchor" href="#video-name-与-page-name" aria-label="Permalink to &quot;video_name 与 page_name&quot;">​</a></h2><p><code>video_name</code> 与 <code>page_name</code> 用于设置下载文件的命名规则，对于所有下载的内容，将会维持如下的目录结构：</p><ol><li><p>单页视频：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {video_name}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {page_name}.mp4</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {page_name}.nfo</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {page_name}-poster.jpg</span></span></code></pre></div></li><li><p>多页视频：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {video_name}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> poster.jpg</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Season</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {page_name}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> S01E01.mp4</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {page_name}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> S01E01.nfo</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {page_name}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> S01E01-thumb.jpg</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {page_name}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> S01E02.mp4</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {page_name}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> S01E02.nfo</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {page_name}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> S01E02-thumb.jpg</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│  </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tvshow.nfo</span></span></code></pre></div></li></ol><p>这两个参数支持使用模板，其中用 <code>{{ }}</code> 包裹的模板变量在执行时会被动态替换为对应的内容。</p><p>对于 <code>video_name</code>，支持设置 bvid（视频编号）、title（视频标题）、upper_name（up 主名称）、upper_mid（up 主 id）。</p><p>对于 <code>page_name</code>，除支持 video 的全部参数外，还支持 ptitle（分 P 标题）、pid（分 P 页号）。</p><p>为了解决文件名可能过长的问题，程序为模板引入了 <code>truncate</code> 函数。如 <code>{{ truncate title 10 }}</code> 表示截取 <code>title</code> 的前 10 个字符。</p><h2 id="interval" tabindex="-1"><code>interval</code> <a class="header-anchor" href="#interval" aria-label="Permalink to &quot;`interval`&quot;">​</a></h2><p>表示程序每次执行扫描下载的间隔时间，单位为秒。</p><h2 id="upper-path" tabindex="-1"><code>upper_path</code> <a class="header-anchor" href="#upper-path" aria-label="Permalink to &quot;`upper_path`&quot;">​</a></h2><p>UP 主头像和信息的保存位置。对于使用 Emby、Jellyfin 媒体服务器的用户，需确保此处路径指向 Emby、Jellyfin 配置中的 <code>/metadata/people/</code> 才能够正常在媒体服务器中显示 UP 主的头像。</p><h2 id="nfo-time-type" tabindex="-1"><code>nfo_time_type</code> <a class="header-anchor" href="#nfo-time-type" aria-label="Permalink to &quot;`nfo_time_type`&quot;">​</a></h2><p>表示在视频信息中使用的时间类型，可选值为 <code>favtime</code>（收藏时间）和 <code>pubtime</code>（发布时间）。</p><p>视频合集/视频列表不存在 <code>favtime</code>，程序实现中将 <code>favtime</code> 设置为与 <code>pubtime</code> 相同，因此该设置对视频合集/视频列表没有影响。</p><h2 id="credential" tabindex="-1"><code>credential</code> <a class="header-anchor" href="#credential" aria-label="Permalink to &quot;`credential`&quot;">​</a></h2><p>哔哩哔哩账号的身份凭据，请参考<a href="https://nemo2011.github.io/bilibili-api/#/get-credential" target="_blank" rel="noreferrer">凭据获取流程</a>获取并对应填写至配置文件中，后续 bili-sync 会在必要时自动刷新身份凭据，不再需要手动管理。</p><p>推荐使用匿名窗口获取，避免潜在的冲突。</p><h2 id="filter-option" tabindex="-1"><code>filter_option</code> <a class="header-anchor" href="#filter-option" aria-label="Permalink to &quot;`filter_option`&quot;">​</a></h2><p>过滤选项，用于设置程序的过滤规则，程序会从过滤结果中选择最优的视频、音频流下载。</p><p>这些内容的可选值可前往 <a href="https://github.com/amtoaer/bili-sync/blob/24d0da0bf3ea65fd45d07587e4dcdbb24d11a589/crates/bili_sync/src/bilibili/analyzer.rs#L10-L55" target="_blank" rel="noreferrer">analyzer.rs</a> 中查看。</p><p>注意将过滤范围设置过小可能导致筛选不到符合要求的流导致下载失败，建议谨慎修改。</p><h3 id="video-max-quality" tabindex="-1"><code>video_max_quality</code> <a class="header-anchor" href="#video-max-quality" aria-label="Permalink to &quot;`video_max_quality`&quot;">​</a></h3><p>视频流允许的最高质量。</p><h3 id="video-min-quality" tabindex="-1"><code>video_min_quality</code> <a class="header-anchor" href="#video-min-quality" aria-label="Permalink to &quot;`video_min_quality`&quot;">​</a></h3><p>视频流允许的最低质量。</p><h3 id="audio-max-quality" tabindex="-1"><code>audio_max_quality</code> <a class="header-anchor" href="#audio-max-quality" aria-label="Permalink to &quot;`audio_max_quality`&quot;">​</a></h3><p>音频流允许的最高质量。</p><h3 id="audio-min-quality" tabindex="-1"><code>audio_min_quality</code> <a class="header-anchor" href="#audio-min-quality" aria-label="Permalink to &quot;`audio_min_quality`&quot;">​</a></h3><p>音频流允许的最低质量。</p><h3 id="codecs" tabindex="-1"><code>codecs</code> <a class="header-anchor" href="#codecs" aria-label="Permalink to &quot;`codecs`&quot;">​</a></h3><p>这是 bili-sync 选择视频编码的优先级顺序，优先级按顺序从高到低。此处对编码格式做一个简单说明：</p><ul><li><p>AVC 又称 H.264，是目前使用最广泛的视频编码格式，绝大部分设备可以使用硬件解码播放该格式的视频（也因此播放普遍流畅），但是同等画质下视频体积较大。</p></li><li><p>HEV(C) 又称 H.265，与 AV1 都是新一代的视频编码格式。这两种编码相比 AVC 有更好的压缩率，同等画质下视频体积更小，但由于相对较新，硬件解码支持不如 AVC 广泛。如果你的播放设备不支持则只能使用软件解码播放，这种情况下可能导致播放卡顿、机器发热等问题。</p></li></ul><p>建议查阅自己常用播放设备对这三种编码的硬件解码支持情况以选择合适的编码格式，如果硬件支持 HEV 或 AV1，那么可以将其优先级调高。</p><p>而如果你的设备不支持，或者单纯懒得查询，那么推荐将 AVC 放在第一位以获得最好的兼容性。</p><h3 id="no-dolby-video" tabindex="-1"><code>no_dolby_video</code> <a class="header-anchor" href="#no-dolby-video" aria-label="Permalink to &quot;`no_dolby_video`&quot;">​</a></h3><p>是否禁用杜比视频流。</p><h3 id="no-dolby-audio" tabindex="-1"><code>no_dolby_audio</code> <a class="header-anchor" href="#no-dolby-audio" aria-label="Permalink to &quot;`no_dolby_audio`&quot;">​</a></h3><p>是否禁用杜比音频流。</p><h3 id="no-hdr" tabindex="-1"><code>no_hdr</code> <a class="header-anchor" href="#no-hdr" aria-label="Permalink to &quot;`no_hdr`&quot;">​</a></h3><p>是否禁用 HDR 视频流。</p><h3 id="no-hires" tabindex="-1"><code>no_hires</code> <a class="header-anchor" href="#no-hires" aria-label="Permalink to &quot;`no_hires`&quot;">​</a></h3><p>是否禁用 Hi-Res 音频流。</p><h2 id="danmaku-option" tabindex="-1"><code>danmaku_option</code> <a class="header-anchor" href="#danmaku-option" aria-label="Permalink to &quot;`danmaku_option`&quot;">​</a></h2><p>弹幕的设置选项，用于设置下载弹幕的样式，几乎全部取自<a href="https://github.com/gwy15/danmu2ass" target="_blank" rel="noreferrer">上游仓库</a>。</p><h3 id="duration" tabindex="-1"><code>duration</code> <a class="header-anchor" href="#duration" aria-label="Permalink to &quot;`duration`&quot;">​</a></h3><p>弹幕在屏幕上的持续时间，单位为秒。</p><h3 id="font" tabindex="-1"><code>font</code> <a class="header-anchor" href="#font" aria-label="Permalink to &quot;`font`&quot;">​</a></h3><p>弹幕的字体。</p><h3 id="font-size" tabindex="-1"><code>font_size</code> <a class="header-anchor" href="#font-size" aria-label="Permalink to &quot;`font_size`&quot;">​</a></h3><p>弹幕的字体大小。</p><h3 id="width-ratio" tabindex="-1"><code>width_ratio</code> <a class="header-anchor" href="#width-ratio" aria-label="Permalink to &quot;`width_ratio`&quot;">​</a></h3><p>计算弹幕宽度的比例，为避免重叠可以调大这个数值。</p><h3 id="horizontal-gap" tabindex="-1"><code>horizontal_gap</code> <a class="header-anchor" href="#horizontal-gap" aria-label="Permalink to &quot;`horizontal_gap`&quot;">​</a></h3><p>两条弹幕之间最小的水平距离。</p><h3 id="lane-size" tabindex="-1"><code>lane_size</code> <a class="header-anchor" href="#lane-size" aria-label="Permalink to &quot;`lane_size`&quot;">​</a></h3><p>弹幕所占据的高度，即“行高度/行间距”。</p><h3 id="float-percentage" tabindex="-1"><code>float_percentage</code> <a class="header-anchor" href="#float-percentage" aria-label="Permalink to &quot;`float_percentage`&quot;">​</a></h3><p>屏幕上滚动弹幕最多高度百分比。</p><h3 id="bottom-percentage" tabindex="-1"><code>bottom_percentage</code> <a class="header-anchor" href="#bottom-percentage" aria-label="Permalink to &quot;`bottom_percentage`&quot;">​</a></h3><p>屏幕上底部弹幕最多高度百分比。</p><h3 id="opacity" tabindex="-1"><code>opacity</code> <a class="header-anchor" href="#opacity" aria-label="Permalink to &quot;`opacity`&quot;">​</a></h3><p>透明度，取值范围为 0-255。透明度可以通过 opacity / 255 计算得到。</p><h3 id="bold" tabindex="-1"><code>bold</code> <a class="header-anchor" href="#bold" aria-label="Permalink to &quot;`bold`&quot;">​</a></h3><p>是否加粗。</p><h3 id="outline" tabindex="-1"><code>outline</code> <a class="header-anchor" href="#outline" aria-label="Permalink to &quot;`outline`&quot;">​</a></h3><p>描边宽度。</p><h3 id="time-offset" tabindex="-1"><code>time_offset</code> <a class="header-anchor" href="#time-offset" aria-label="Permalink to &quot;`time_offset`&quot;">​</a></h3><p>时间轴偏移，&gt;0 会让弹幕延后，&lt;0 会让弹幕提前，单位为秒。</p><h2 id="favorite-list" tabindex="-1"><code>favorite_list</code> <a class="header-anchor" href="#favorite-list" aria-label="Permalink to &quot;`favorite_list`&quot;">​</a></h2><p>你想要下载的收藏夹与想要保存的位置。简单示例：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">3115878158 = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/amtoaer/Downloads/bili-sync/测试收藏夹&quot;</span></span></code></pre></div><p>收藏夹 ID 的获取方式可以参考<a href="/favorite">这里</a>。</p><h2 id="collection-list" tabindex="-1"><code>collection_list</code> <a class="header-anchor" href="#collection-list" aria-label="Permalink to &quot;`collection_list`&quot;">​</a></h2><p>你想要下载的视频合集/视频列表与想要保存的位置。注意“视频合集”与“视频列表”是两种不同的类型。在配置文件中需要做区分：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;series:387051756:432248&quot; = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/amtoaer/Downloads/bili-sync/测试视频列表&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;season:1728547:101343&quot; = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/amtoaer/Downloads/bili-sync/测试合集&quot;</span></span></code></pre></div><p>具体说明可以参考<a href="/collection">这里</a>。</p><h2 id="watch-later" tabindex="-1"><code>watch_later</code> <a class="header-anchor" href="#watch-later" aria-label="Permalink to &quot;`watch_later`&quot;">​</a></h2><p>设置稍后再看的扫描开关与保存位置。</p><p>如果你希望下载稍后再看列表中的视频，可以将 <code>enabled</code> 设置为 <code>true</code>，并填写 <code>path</code>。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enabled = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/amtoaer/Downloads/bili-sync/稍后再看&quot;</span></span></code></pre></div>',82),o=[n];function l(h,p,d,r,c,k){return e(),i("div",null,o)}const g=a(t,[["render",l]]);export{u as __pageData,g as default};
